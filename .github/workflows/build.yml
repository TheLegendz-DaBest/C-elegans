name: Build C. elegans Database Executable

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: C-Elegans-Database-Linux
            executable_name: C_Elegans_Database
            path_separator: ":"
          - os: macos-latest
            artifact_name: C-Elegans-Database-macOS
            executable_name: C_Elegans_Database
            path_separator: ":"
          - os: windows-latest
            artifact_name: C-Elegans-Database-Windows
            executable_name: C_Elegans_Database.exe
            path_separator: ";"

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Graphviz (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz

    - name: Install Graphviz (macOS)
      if: runner.os == 'macOS'
      run: brew install graphviz

    - name: Install Graphviz (Windows)
      if: runner.os == 'Windows'
      run: choco install graphviz

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # BUILD-TIME STEP: Generate the static workflow diagram BEFORE building.
    # This creates the PNG file needed for the --add-data flag below.
    - name: Generate Workflow Diagram
      run: python local_app.py --generate-diagram-only

    # BUILD-TIME STEP: Build the application executable.
    # This bundles the script, templates, the diagram, and all dependencies.
    # The hook correctly bundles the 'fake_useragent' data to prevent crashes.
    - name: Build the executable with PyInstaller
      env:
        NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
      run: |
        pyinstaller --onefile --name "${{ matrix.executable_name }}" \
        --add-data "templates${{ matrix.path_separator }}templates" \
        --add-data "Workflow_Diagram.png${{ matrix.path_separator }}." \
        --additional-hooks-dir ".github/hooks" \
        local_app.py

    - name: Upload Executable Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.executable_name }}